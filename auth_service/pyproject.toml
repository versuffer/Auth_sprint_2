[tool.poetry]
name = "auth-sprint-1"
version = "1.0.0"
description = ""
authors = ["Носов Сергей Олегович <SONosov@datafort.ru>"]
readme = "README.md"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = "~3.11.9"
fastapi = "0.111.0"
uvicorn = "0.30.1"
gunicorn = "22.0.0"
redis = "5.0.5"
pydantic = {extras = ["email"], version = "2.7.4"}
pydantic-settings = "2.3.1"
asyncpg = "^0.29.0"
sqlalchemy = "2.0.30"
alembic = "1.13.1"
pyjwt = "2.8.0"
argon2-cffi = "23.1.0"

opentelemetry-api = "^1.26.0"
opentelemetry-sdk = "^1.26.0"
opentelemetry-instrumentation-fastapi = "^0.47b0"
opentelemetry-exporter-jaeger = "^1.21.0"
greenlet = "^3.0.3"
yandex-oauth = "^1.1.2"
[tool.poetry.group.dev.dependencies]
# CI helpers
pre-commit = "*"

# Code formatting
isort = "*"
black = "*"
flake8 = "*"
flake8-aaa = "*"
flake8-pytest-style = "*"
flake8-pyproject = "*"

# Security
bandit = "*"

# Type checking
mypy = "*"
types-redis = "*"

# Testing
pytest = "*"
pytest-env = "*"  # подменяет реальные энвы на тестовые при запуске пайтест-сессии
pytest-mock = "*"  # предоставляет фикстуру (mocker) для создания мок-объектов
pytest-xdist = "*"  # позволяет запускать тесты в несколько потоков
pytest-randomly = "*"  # запускает тесты в случайном порядке + позволяет задать seed для всех инстансов random
faker = "*"  # генерация случайных тестовых данных
polyfactory = "*"  # библиотека для быстрого создания фабрик на основе pydantic-схем
pytest-fixture-classes = "*"  # позволяет писать фикстуры виде классов
pytest-icdiff = "*"  # выводит более приятные различия в между словарями

[tool.isort]
profile = 'black'

[tool.black]
line-length = 120
skip-string-normalization = true

[tool.flake8]
exclude = [".git", "__pycache__", ".venv"]
max-line-length = 120

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
plugins = [
    "pydantic.mypy"
]

[tool.pytest_env]
REDIS_DB="15"
POSTGRES_DB="test_auth_database"
