version: '3.8'

services:
  postgres_db:
    container_name: auth_db
    image: postgres:16.2
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7.2.4
    container_name: redis
    restart: always
    networks:
      - custom_network
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  auth_app:
    container_name: auth_app
    build: ..
    restart: always
    env_file:
      - ".env"
    networks:
      - custom_network
    depends_on:
      - redis

  auth_jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686'
    depends_on:
      - auth_app

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/auth_app.conf:/etc/nginx/conf.d/auth_app.conf
    networks:
      - custom_network
    restart: always
    depends_on:
      - auth_app

volumes:
  postgres_data:

networks:
  custom_network:
    external: false
    driver: bridge
