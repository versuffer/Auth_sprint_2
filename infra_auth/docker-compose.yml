version: '3.8'

services:

# ADMIN DB SERVICE

  postgres_db:
    container_name: postgres_db
    image: postgres:16.2
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - admin_service_example.env
    networks:
      - custom_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  admin_service:
    container_name: admin_service
    build: ../admin_service
    volumes:
      - static:/app/static/
      - media:/app/media/
    networks:
      - custom_network
    restart: always
    env_file:
      - admin_service_example.env
    depends_on:
      postgres_db:
        condition: service_healthy


# AUTH SERVICE

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - custom_network
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  auth_app:
    container_name: auth_app
    build: ../auth_service
    restart: always
    env_file:
      - auth_example.env
    networks:
      - custom_network
    depends_on:
      redis:
        condition: service_healthy
      postgres_db:
        condition: service_healthy

  auth_jaeger:
    image: jaegertracing/all-in-one:latest
    networks:
      - custom_network
    ports:
      - '16686:16686'
    depends_on:
      - auth_app

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/auth_admin_app.conf:/etc/nginx/conf.d/auth_admin_app.conf
      - static:/var/html/static/
      - media:/var/html/media/
    networks:
      - custom_network
    restart: always
    depends_on:
      - auth_app
      - admin_service

networks:
  custom_network:
    external: true
    driver: bridge

volumes:
  postgres_data:
  static:
  media:
